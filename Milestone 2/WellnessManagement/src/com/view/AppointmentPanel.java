/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.view;

import com.dao.AppointmentDAOImpl;

import com.controller.AppointmentController;
import com.controller.CounselorController;
import com.dao.DBConnection;
import com.model.Appointment;

import java.sql.Connection;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import java.util.List;

/**
 *
 * @author chesa
 */
public class AppointmentPanel extends javax.swing.JPanel implements com.dao.CounselorChangeListener {

    private AppointmentDAOImpl appointmentDAOImpl;
    private AppointmentController appointmentController;
    private final CounselorController counselorController = CounselorController.getInstance(); // ✅ singleton

    @Override
    public void onCounselorListChanged() {
        refreshCounselorDropdown();
    }

    public void refreshCounselorDropdown() {
        cbCounselor.removeAllItems();
        List<String> names = counselorController.getFormattedCounselorList();
        System.out.println("Dropdown refresh triggered. Counselors: " + names); // 🧪
        for (String name : names) {
            cbCounselor.addItem(name);
        }
    }

    /**
     * Creates new form AppointmentPanel1
     */
    public AppointmentPanel() {
        initComponents();
        
        
        appointmentDAOImpl = new AppointmentDAOImpl(DBConnection.getConnection());
        appointmentController = new AppointmentController();

        // ✅ Register this panel as a listener for counselor changes
        counselorController.addCounselorChangeListener(this);

        loadCounselors();   // initial dropdown population
        clearFields();

        // Table selection logic
        jTable1.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = jTable1.getSelectedRow();
                if (selectedRow != -1) {
                    tfStudentName.setText(jTable1.getValueAt(selectedRow, 3).toString());
                    cbCounselor.setSelectedItem(jTable1.getValueAt(selectedRow, 4).toString());

                    String dateStr = jTable1.getValueAt(selectedRow, 1).toString();
                    try {
                        java.util.Date utilDate = new java.text.SimpleDateFormat("yyyy-MM-dd").parse(dateStr);
                        jDateChooser1.setDate(utilDate);
                    } catch (java.text.ParseException ex) {
                        ex.printStackTrace();
                        jDateChooser1.setDate(null); // fallback if parsing fails
                    }

                    String timeFromDB = jTable1.getValueAt(selectedRow, 2).toString(); // full time e.g. "09:30:00"
                    String[] timeParts = timeFromDB.split(":");
                    if (timeParts.length >= 2) {
                        String formattedTime = timeParts[0] + ":" + timeParts[1]; // HH:mm
                        cbTime.setSelectedItem(formattedTime);
                    } else {
                        cbTime.setSelectedIndex(-1);
                    }
                    cbStatus.setSelectedItem(jTable1.getValueAt(selectedRow, 5).toString());
                }
            }
        });
        
        
    }

    private void loadCounselors() {
        cbCounselor.removeAllItems();
        List<String> counselorList = counselorController.getFormattedCounselorList();
        for (String name : counselorList) {
            cbCounselor.addItem(name);
        }
    }

    private boolean checkTimeConflict(int appointmentId, String dateStr, String timeStr, String counselor) {
        // Check time conflict using the DAO method
        return appointmentDAOImpl.hasTimeConflict(appointmentId, dateStr, timeStr, counselor);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStudentName = new javax.swing.JLabel();
        lblCounselor = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        tfStudentName = new javax.swing.JTextField();
        cbCounselor = new javax.swing.JComboBox<>();
        cbTime = new javax.swing.JComboBox<>();
        cbStatus = new javax.swing.JComboBox<>();
        btnSave = new javax.swing.JButton();
        btnViewAll = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnRemoveAll = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        btnDelete1 = new javax.swing.JButton();
        lblAppointment = new javax.swing.JLabel();

        lblStudentName.setText("Student Name:");

        lblCounselor.setText("Counselor:");

        lblDate.setText("Date(YYYY-MM-DD):");

        lblTime.setText("Time:");

        lblStatus.setText("Status:");

        cbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00" }));

        cbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Scheduled", "Completed", "Cancelled" }));

        btnSave.setText("Save Appointment");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnViewAll.setText("View All Apointments");
        btnViewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        btnUpdate.setText(" Update Apointment");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnRemoveAll.setText("Remove All Cancelled Appointments");
        btnRemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveAllActionPerformed(evt);
            }
        });

        btnDelete1.setText("Cancel Apointment");
        btnDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete1ActionPerformed(evt);
            }
        });

        lblAppointment.setFont(new java.awt.Font("Yu Gothic", 1, 72)); // NOI18N
        lblAppointment.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAppointment.setText("Appoinment Panel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblStatus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCounselor)
                                    .addComponent(lblDate)
                                    .addComponent(lblTime)
                                    .addComponent(lblStudentName))
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbCounselor, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfStudentName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jDateChooser1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(cbTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRemoveAll)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnDelete1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnViewAll))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSave)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete1)
                        .addGap(18, 18, 18)
                        .addComponent(btnViewAll)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemoveAll))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStudentName)
                            .addComponent(tfStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblCounselor)
                                    .addComponent(cbCounselor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addComponent(lblDate))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTime)
                            .addComponent(cbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStatus)
                            .addComponent(cbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            String student = tfStudentName.getText().trim();
            String counselor = cbCounselor.getSelectedItem().toString();
            String status = cbStatus.getSelectedItem().toString();
            java.util.Date utilDate = jDateChooser1.getDate();
            if (utilDate == null) {
                JOptionPane.showMessageDialog(this, "⚠️ Please select a valid date.");
                return;
            }
            java.sql.Date date = new java.sql.Date(utilDate.getTime());
            String dateStr = date.toString();  // if you still need the String version
            String timeStr = cbTime.getSelectedItem().toString().trim() + ":00"; // format: HH:mm:ss

            java.sql.Time time = java.sql.Time.valueOf(timeStr);
            Appointment appointment = new Appointment();
            appointment.setStudent(student);
            appointment.setCounselor(counselor);
            appointment.setDate(date);
            appointment.setTime(time);
            appointment.setStatus(status);

            // Check for time conflict
            boolean conflict = checkTimeConflict(-1, dateStr, timeStr, counselor); // -1 for new appointment
            if (conflict) {
                JOptionPane.showMessageDialog(this,
                        "This time slot is not available. Appointments must be at least 30 minutes apart.",
                        "Time Conflict", JOptionPane.WARNING_MESSAGE);
                return;
            }
            java.time.LocalDate selectedDate = date.toLocalDate();
            if (selectedDate.isBefore(java.time.LocalDate.now())) {
                JOptionPane.showMessageDialog(this,
                        "⚠️ Cannot schedule an appointment for a past date.",
                        "Invalid Date", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Save appointment
            Connection conn = DBConnection.getConnection();
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "❌ Failed to connect to the database.");
                return;
            }
            appointmentDAOImpl.registerAppointment(appointment);

            JOptionPane.showMessageDialog(this, "✅ Appointment added successfully.");
            refreshAppointmentTable();
            clearFields();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "⚠️ Failed to save appointment fields are incorect");
            ex.printStackTrace(); // Log exception details
        }
        clearFields();
    }//GEN-LAST:event_btnSaveActionPerformed


    private void btnViewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllActionPerformed
        // TODO add your handling code here:
        AppointmentController controller = new AppointmentController();
        displayAppointments(controller, jTable1);
    }//GEN-LAST:event_btnViewAllActionPerformed
    public void displayAppointments(AppointmentController controller, JTable table) {
        List<Appointment> appointments = controller.getUpcomingAppointments();
        table.setModel(controller.createAppointmentTableModel(appointments));
    }

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        try {
            int selectedRow = jTable1.getSelectedRow();

            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select an appointment to update.");
                return;
            }

            int appointmentId = (int) jTable1.getValueAt(selectedRow, 0);
            java.util.Date utilDate = jDateChooser1.getDate();
            if (utilDate == null) {
                JOptionPane.showMessageDialog(this, "⚠️ Please select a valid date.");
                return;
            }
            java.sql.Date date = new java.sql.Date(utilDate.getTime());
            String dateStr = date.toString();  // if you still need the String version
            String newTime = cbTime.getSelectedItem().toString().trim() + ":00"; // format: HH:mm:ss
            String newStatus = cbStatus.getSelectedItem().toString();
            String counselor = cbCounselor.getSelectedItem().toString();

            java.time.LocalDate selectedDate = java.sql.Date.valueOf(dateStr).toLocalDate();
            if (selectedDate.isBefore(java.time.LocalDate.now())) {
                JOptionPane.showMessageDialog(this,
                        "⚠️ Cannot update to a past date.",
                        "Invalid Date", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Check for time conflict
            boolean conflict = checkTimeConflict(appointmentId, dateStr, newTime, counselor);
            if (conflict) {
                JOptionPane.showMessageDialog(this,
                        "This time slot is not available. Appointments must be at least 30 minutes apart.",
                        "Time Conflict", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Build updated appointment object
            Appointment updatedAppointment = new Appointment();
            updatedAppointment.setId(appointmentId);
            updatedAppointment.setDate(java.sql.Date.valueOf(dateStr));
            updatedAppointment.setTime(java.sql.Time.valueOf(newTime));
            updatedAppointment.setStatus(newStatus);
            updatedAppointment.setCounselor(counselor);
            updatedAppointment.setStudent(tfStudentName.getText().trim());

            // Update appointment
            boolean success = appointmentDAOImpl.updateAppointment(updatedAppointment);
            if (success) {
                JOptionPane.showMessageDialog(this, "✅ Appointment updated successfully.");
                refreshAppointmentTable(); // Refresh table after update
                clearFields(); // Clear input fields after update
            } else {
                JOptionPane.showMessageDialog(this, "⚠️ Failed to update appointment.");
            }

        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "⚠️ Invalid date or time format. Please check your inputs.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "⚠️ Error updating appointment: " + e.getMessage());
            e.printStackTrace(); // Log exception details
        }

    }//GEN-LAST:event_btnUpdateActionPerformed


    private void btnRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveAllActionPerformed
        int confirm = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete all cancelled appointments?",
                "Confirm Deletion", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            boolean success = appointmentController.deleteCancelledAppointments();
            if (success) {
                JOptionPane.showMessageDialog(this, "✅ All cancelled appointments have been deleted.");
                refreshAppointmentTable(); // Refresh to show updated list
            } else {
                JOptionPane.showMessageDialog(this, "⚠️ Failed to delete cancelled appointments.");
            }
        }
    }//GEN-LAST:event_btnRemoveAllActionPerformed

    private void btnDelete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelete1ActionPerformed
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an appointment to cancel.");
            return;
        }

        int appointmentId = (int) jTable1.getValueAt(selectedRow, 0);

        // Update appointment status to "Cancelled"
        boolean success = appointmentDAOImpl.updateAppointmentStatus(appointmentId, "Cancelled");
        if (success) {
            JOptionPane.showMessageDialog(this, "✅ Appointment cancelled successfully.");
            refreshAppointmentTable(); // Refresh table after cancel
        } else {
            JOptionPane.showMessageDialog(this, "⚠️ Failed to cancel appointment.");
        }
    }//GEN-LAST:event_btnDelete1ActionPerformed

    private void refreshAppointmentTable() {
        AppointmentController controller = new AppointmentController();
        List<Appointment> appointments = controller.getUpcomingAppointments();
        jTable1.setModel(controller.createAppointmentTableModel(appointments));
    }

    private void clearFields() {
        tfStudentName.setText("");
        jDateChooser1.setDate(null);
        cbCounselor.setSelectedIndex(-1);
        cbTime.setSelectedIndex(-1);
        cbStatus.setSelectedIndex(-1);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete1;
    private javax.swing.JButton btnRemoveAll;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnViewAll;
    private javax.swing.JComboBox<String> cbCounselor;
    private javax.swing.JComboBox<String> cbStatus;
    private javax.swing.JComboBox<String> cbTime;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblAppointment;
    private javax.swing.JLabel lblCounselor;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStudentName;
    private javax.swing.JLabel lblTime;
    private javax.swing.JTextField tfStudentName;
    // End of variables declaration//GEN-END:variables
}
