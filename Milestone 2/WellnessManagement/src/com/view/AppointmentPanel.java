/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.view;

import com.dao.AppointmentDAO;
import com.dao.AppointmentDAOImpl;
import com.controller.AppointmentController;
import com.dao.DBConnection;
import com.model.Appointment;
import java.sql.Connection;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import java.util.List;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author chesa
 */
public class AppointmentPanel extends javax.swing.JPanel {
private AppointmentDAOImpl appointmentDAOImpl;
    /**
     * Creates new form AppointmentPanel1
     */
    public AppointmentPanel() {
        initComponents();
        appointmentDAOImpl = new AppointmentDAOImpl(DBConnection.getConnection());
        // Add ListSelectionListener to jTable1 to populate fields when a row is selected
        jTable1.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = jTable1.getSelectedRow();
                if (selectedRow != -1) {
                    tfStudentName.setText(jTable1.getValueAt(selectedRow, 3).toString());
                    cbCounselor.setSelectedItem(jTable1.getValueAt(selectedRow, 4).toString());
                    tfDate.setText(jTable1.getValueAt(selectedRow, 1).toString());
                    cbTime.setSelectedItem(jTable1.getValueAt(selectedRow, 2).toString());
                    cbStatus.setSelectedItem(jTable1.getValueAt(selectedRow, 5).toString());
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStudentName = new javax.swing.JLabel();
        lblCounselor = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        tfStudentName = new javax.swing.JTextField();
        tfDate = new javax.swing.JTextField();
        cbCounselor = new javax.swing.JComboBox<>();
        cbTime = new javax.swing.JComboBox<>();
        cbStatus = new javax.swing.JComboBox<>();
        btnSave = new javax.swing.JButton();
        btnViewAll = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        lblStudentName.setText("Student Name:");

        lblCounselor.setText("Counselor:");

        lblDate.setText("Date(YYYY-MM-DD):");

        lblTime.setText("Time:");

        lblStatus.setText("Status:");

        cbCounselor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Test" }));

        cbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00 ", "09:00 ", "10:00 ", "11:00 ", "12:00", "13:00", "14:00", "15:00", "16:00" }));

        cbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Scheduled", "Completed", "Cancelled" }));

        btnSave.setText("Save Appointment");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnViewAll.setText("View All Apointments");
        btnViewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        btnUpdate.setText(" Update Apointment");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Cancel Apointment");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(117, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblStudentName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tfStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCounselor)
                                    .addComponent(lblDate)
                                    .addComponent(lblTime)
                                    .addComponent(lblStatus))
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cbCounselor, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfDate, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbTime, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(119, 119, 119))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btnViewAll)
                        .addGap(101, 101, 101))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfStudentName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblStudentName)
                                .addGap(4, 4, 4)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(lblCounselor)
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblDate)
                                    .addComponent(tfDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblTime)
                                    .addComponent(cbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblStatus)
                                    .addComponent(cbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(cbCounselor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(btnSave)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(btnViewAll)
                        .addGap(119, 119, 119)))
                .addGap(19, 19, 19))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            String student = tfStudentName.getText().trim();
            String counselor = cbCounselor.getSelectedItem().toString();
            String status = cbStatus.getSelectedItem().toString();
            String dateStr = tfDate.getText().trim(); // format: YYYY-MM-DD
            String timeStr = cbTime.getSelectedItem().toString().trim() + ":00";

            java.sql.Date date = java.sql.Date.valueOf(dateStr);
            java.sql.Time time = java.sql.Time.valueOf(timeStr);

            Appointment appointment = new Appointment();
            appointment.setStudent(student);
            appointment.setCounselor(counselor);
            appointment.setDate(date);
            appointment.setTime(time);
            appointment.setStatus(status);

            // use registerAppointment instead of addAppointment
            Connection conn = DBConnection.getConnection();
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "❌ Failed to connect to the database.");
                return;
            }
            AppointmentDAO dao = new AppointmentDAOImpl(conn);
            dao.registerAppointment(appointment);

            JOptionPane.showMessageDialog(this, "✅ Appointment added successfully.");

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "⚠️ Failed to save appointment.\nSee console for details.");
            ex.printStackTrace();  // ✅ this is the real source of truth
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    
    
    private void btnViewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllActionPerformed
        // TODO add your handling code here:
        AppointmentController controller = new AppointmentController();
        displayAppointments(controller, jTable1);
    }//GEN-LAST:event_btnViewAllActionPerformed
    public void displayAppointments(AppointmentController controller, JTable table) {
        List<Appointment> appointments = controller.getUpcomingAppointments();
        table.setModel(controller.createAppointmentTableModel(appointments));
    }
    
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        
        try {
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an appointment to update.");
            return;
        }

        // Get appointment id from table
        int appointmentId = (int) jTable1.getValueAt(selectedRow, 0);

        // Read user inputs
        String newDate = tfDate.getText().trim(); // expect format "YYYY-MM-DD"
        String newTime = cbTime.getSelectedItem().toString().trim();  // e.g. "08:00"

        // Ensure time string is in "HH:mm:ss" format for java.sql.Time.valueOf()
        if (newTime.length() == 5) { // e.g. "08:00"
            newTime += ":00";        // convert to "08:00:00"
        }
        java.sql.Time sqlTime = java.sql.Time.valueOf(newTime);

        String newStatus = cbStatus.getSelectedItem().toString();
        String counselor = cbCounselor.getSelectedItem().toString();

        // Check time conflict using the time string with seconds
        boolean conflict = appointmentDAOImpl.hasTimeConflict(appointmentId, newDate, newTime, counselor);
        if (conflict) {
            JOptionPane.showMessageDialog(this,
                "This time slot is not available. Appointments must be at least 30 minutes apart.",
                "Time Conflict", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Build updated appointment object
        Appointment updatedAppointment = new Appointment();
        updatedAppointment.setId(appointmentId);
        updatedAppointment.setDate(java.sql.Date.valueOf(newDate));
        updatedAppointment.setTime(sqlTime);
        updatedAppointment.setStatus(newStatus);
        updatedAppointment.setCounselor(counselor);
        updatedAppointment.setStudent(tfStudentName.getText().trim());

        // Update in DB
        boolean success = appointmentDAOImpl.updateAppointment(updatedAppointment);
        if (success) {
            JOptionPane.showMessageDialog(this, "Appointment updated successfully.");
            refreshAppointmentTable();  // Your method to reload table data
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update appointment.");
        }

    } catch (IllegalArgumentException e) {
        JOptionPane.showMessageDialog(this, "Invalid date or time format. Please check your inputs.");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error updating appointment: " + e.getMessage());
        e.printStackTrace();
    } 
        
    }//GEN-LAST:event_btnUpdateActionPerformed
    

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an appointment to delete.");
            return;
        }

        int appointmentId = (int) jTable1.getValueAt(selectedRow, 0);

        int confirm = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to permanently delete this appointment?",
            "Confirm Delete",
            JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            appointmentDAOImpl.deleteAppointment(appointmentId);
            JOptionPane.showMessageDialog(this, "Appointment deleted successfully.");
            refreshAppointmentTable(); // Reload the appointment table
        }
    }//GEN-LAST:event_btnDeleteActionPerformed
   
    private void refreshAppointmentTable() {
        AppointmentController controller = new AppointmentController();
        List<Appointment> appointments = controller.getUpcomingAppointments();
        jTable1.setModel(controller.createAppointmentTableModel(appointments));
    }
    
    
    
    
    
    

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnViewAll;
    private javax.swing.JComboBox<String> cbCounselor;
    private javax.swing.JComboBox<String> cbStatus;
    private javax.swing.JComboBox<String> cbTime;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblCounselor;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStudentName;
    private javax.swing.JLabel lblTime;
    private javax.swing.JTextField tfDate;
    private javax.swing.JTextField tfStudentName;
    // End of variables declaration//GEN-END:variables
}
